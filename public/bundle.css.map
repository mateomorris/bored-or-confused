{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/LecturerScreen.svelte",
    "../src/screens/LandingScreen.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { fly, fade } from 'svelte/transition';\n  import { db } from './firebase';\n  import { collectionData } from 'rxfire/firestore';\n\timport { tap } from 'rxjs/operators';\n\timport { object } from 'rxfire/database';\n\timport moment from 'moment';\n\n\timport FeedbackReceived from './components/FeedbackReceived.svelte';\n\n\timport ShortUniqueId from 'short-unique-id';\n\tlet uid = new ShortUniqueId();\n\n\tlet classId = uid.randomUUID(4).toLowerCase();\n\n  db.collection('classes')\n  .doc(classId)\n  .set({ \n    feedback: [],\n    students: []\n  });\n\n  const instructorsClass = db.collection('classes').doc(classId);\n\n  instructorsClass.onSnapshot(function(doc) {\n    let data = doc.data();\n    console.log(data);\n    nStudents = data.students.length;\n    allFeedback = data.feedback\n      .sort((a, b) => (a.created < b.created) ? 1 : -1)\n      .map(stuff => ({\n      ...stuff,\n      formattedTime: moment(stuff.created).fromNow()\n    }));\n  });\n\n\tlet allFeedback = [];\n  let clearDate = new Date();\n  let nStudents = 0;\n\n\n  function showClassIdPopop() {\n    var win = window.open(\"\", \"BoC - Class ID\", \"toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=no,resizable=yes,width=200,height=50,top=\"+(screen.height-400)+\",left=\"+(screen.width-840));\n    win.document.body.innerHTML = `\n      <style>\n        body {\n          margin: 0;\n        }\n        #container {\n          background-color:rgb(47,47,47);\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          flex-direction: column;\n          height: 100vh;\n        }\n\n        #container > h1 {\n          font-family:sans-serif;\n          color:white;\n          text-align:center;\n          font-size: 10vw;\n          margin-bottom: 0;\n        }\n\n        #container > h2 {\n          font-family:sans-serif;\n          color:white;\n          text-align:center;\n          font-size: 5vw;\n          margin-top: 0.25rem;\n          font-weight: 400;\n        }\n\n        #container span {\n          text-decoration: underline;\n        }\n      </style>\n      <div id=\"container\">\n        <h1>\n          Class ID: <span>${classId}</span>\n        </h1>\n        <h2>\n          boredorconfused.com\n        </h2>\n      </div>\n    `;\n  }\n\t\n</script>\n\n<style>\n  .class-id {\n    text-align: right;\n  }\n  .class-id > strong {\n    text-decoration: underline;\n  }\n</style>\n\n<div class=\"container\" in:fly=\"{{ y: -50, duration: 500 }}\">\n  <section class=\"hero is-dark\">\n    <div class=\"hero-body\">\n      <div class=\"container\">\n        <div class=\"columns\">\n          <div class=\"column\">\n            <h1 class=\"title\">\n              Bored or Confused\n            </h1>\n            <h2 class=\"subtitle\">\n              Instructor Dashboard\n            </h2>\n            <h2 class=\"subtitle\">\n              { nStudents } student{ nStudents === 1 ? '' : 's'}\n            </h2>\n          </div>\n          <div class=\"column class-id\" on:click={() => { showClassIdPopop() }}>\n            <button class=\"button is-large\">Class ID:<strong>{classId}</strong></button>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </section>\n  <hr/>\n  {#each allFeedback as item (item.created)}\n    {#if item.created >= clearDate}\n      <FeedbackReceived item={item} key={item.created}/>\n    {/if}\n  {/each}\n</div>",
    "<script>\n\timport { createEventDispatcher } from 'svelte';\n\tconst dispatch = createEventDispatcher();\n\n  function navigate(screen) {\n    dispatch('navigate', {\n      screen\n    })\n  }\n\n</script>\n\n<style>\n\t.button {\n\t\theight: 50vh;\n\t}\n</style>\n\n<h1 class=\"title\">Bored or Confused</h1>\n<h2 class=\"subtitle\">\n  A tool for discreetly giving feedback to an instructor while they're lecturing. Great for introverts.\n</h2>\n<div class=\"columns\">\n  <div class=\"column\">\n    <button class=\"button is-large is-fullwidth is-info\" on:click={() => { navigate('student') }}>Student</button>\n  </div>\n  <div class=\"column\">\n    <button class=\"button is-large is-fullwidth is-success\" on:click={() => { navigate('instructor') }}>Instructor</button>\n  </div>\n</div>"
  ],
  "names": [],
  "mappings": "AA4FE,SAAS,cAAC,CAAC,AACT,UAAU,CAAE,KAAK,AACnB,CAAC;ACjFF,OAAO,eAAC,CAAC,AACR,MAAM,CAAE,IAAI,AACb,CAAC"
}